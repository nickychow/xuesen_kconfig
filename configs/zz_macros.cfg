#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    CLEAN_NOZZLE
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600

    ##  Uncomment for 300 build
    G0 X150 Y150 Z30 F3600

    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32
# gcode:
#     SAVE_GCODE_STATE NAME=STATE_G32
#     STATUS_HEATING
#     # Set and wait for bed to reach temperature for TAP
#     M190 S100
#     # Set and wait for nozzle to reach temperature
#     M109 S150
#     STATUS_HOMING
#     G28
#     STATUS_LEVELING
#     QUAD_GANTRY_LEVEL
#     STATUS_HOMING
#     G28
#     G0 X150 Y150 Z30 F3600
#     STATUS_READY
#     ##  Uncomment for for your size printer:
#     #--------------------------------------------------------------------
#     ##  Uncomment for 250mm build
#     #G0 X125 Y125 Z30 F3600

#     ##  Uncomment for 300 build

#     ##  Uncomment for 350mm build
#     #G0 X175 Y175 Z30 F3600
#     #--------------------------------------------------------------------
#     RESTORE_GCODE_STATE NAME=STATE_G32


#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
[gcode_macro PRINT_START]
gcode:
    G32                            ; home all axes
    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament

    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    CLEAN_NOZZLE

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(50) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91
    G92 E0
    G1 E350 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    M300
    M300
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(50) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    M300 # beep
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-420 F{max_velocity} # fast-unload
    M300
    M300
    RESTORE_GCODE_STATE NAME=unload_state

# [gcode_macro CALIBRATE_Z]
# rename_existing: BASE_CALIBRATE_Z
# gcode:
#     {% set bed_position = params.BED_POSITION|default('None') %}
#     G28                         # can also be a conditional homing macro
#     M117 Z-Calibration..
#     ATTACH_PROBE                # a macro for fetching the probe first
#     {% if bed_position != 'None' %}
#       BASE_CALIBRATE_Z BED_POSITION={bed_position}
#     {% else %}
#       BASE_CALIBRATE_Z
#     {% endif %}
#     DETACH_PROBE                # and parking it afterwards (or DOCK_PROBE in klicky macros)
#     M117

[gcode_macro CLEAN_NOZZLE]
description: Cleans the nozzle on the scrub brush
variable_start_x: 280
variable_start_y: 301
variable_start_z: 3.85
variable_wipe_dist: -50
variable_wipe_qty: 6
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}

 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}